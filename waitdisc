#!/usr/bin/python3
#+
# This script waits for media to appear in an optical drive
# before continuing. It is useful with CD/DVD-burning tools
# that seem incapable of doing this for themselves. Invoke it
# as follows:
#
#     waitdisc [--close] [devicename]
#
# where devicename is the path to the device file for the
# optical drive to poll; if omitted, this defaults to the
# only optical drive on the system, with an error reported
# if there is more than one.
#
# If --close is specified, then a command is sent to close
# the device tray before polling starts.
#
# The script repeatedly polls the UDisks daemon via D-Bus for the
# state of the specified drive, and exits when UDisks reports
# that there is media in the drive.
#
# Copyright 2013-2015 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY-SA <http://creativecommons.org/licenses/by-sa/4.0/>.
#-

import sys
import os
import time
from fcntl import \
    ioctl
import dbus
from xml.etree import \
    ElementTree as XMLElementTree
import getopt

# from /usr/include/linux/cdrom.h
CDROMCLOSETRAY = 0x5319

#+
# Useful D-Bus stuff
#-

def introspect(obj) :
    "constructs an XMLElementTree from the introspection of obj."
    return \
        XMLElementTree.fromstring \
          (
            dbus.Interface(obj, dbus_interface = "org.freedesktop.DBus.Introspectable")
                .Introspect()
          )
#end introspect

def get_prop(obj, interface, propname, conv = lambda x : x) :
    "returns the value of a specified property from a specified interface for the object."
    return \
        conv(dbus.Interface \
          (
            obj,
            dbus_interface = "org.freedesktop.DBus.Properties"
          ).Get(interface, propname))
#end get_prop

to_bool = lambda x : bool(int(x))

#+
# Useful UDisks stuff
#-

udisks_bus = "org.freedesktop.UDisks"
udisks_device_interface = "org.freedesktop.UDisks.Device"
udisks_devices_root = "/org/freedesktop/UDisks/devices"

def find_optical_writer_drives() :
    "generator which yields D-Bus object paths and object references representing" \
    " all optical writer drives found on the system."
    try :
        udisks_devices = \
            dbus.SystemBus().get_object(udisks_bus, udisks_devices_root)
    except dbus.exceptions.DBusException :
        # assume udisks daemon not running
        # udisks_devices = None
        raise # don't bother recovering
    #end try
    if udisks_devices != None :
        for device_node in introspect(udisks_devices).findall("node") :
            device_name = udisks_devices_root + "/" + device_node.get("name")
            device = dbus.SystemBus().get_object(udisks_bus, device_name)
            if (
                    not get_prop(device, udisks_device_interface, "DeviceIsReadOnly", to_bool)
                and
                    any
                      (
                        "optical" in str(s)
                        for s in
                            get_prop(device, udisks_device_interface, "DriveMediaCompatibility")
                      )
            ) :
                yield device_name, device
            #end if
        #end for
    #end if
#end find_optical_writer_drives

#+
# Mainline
#-

do_close = False
device_path = None
poll_interval = 0.25
quiet = False
(opts, args) = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ("close", "poll=", "quiet")
  )
if len(args) > 1 :
    raise getopt.GetoptError("need no more one arg, the device path of the optical drive")
#end if
for keyword, value in opts :
    if keyword == "--close" :
        do_close = True
    elif keyword == "--poll" :
        poll_interval = float(value)
    elif keyword == "--quiet" :
        quiet = True
    #end if
#end for
if len(args) > 0 :
    device_path = os.path.realpath(args[0])
#end if

avail_devices = list(find_optical_writer_drives())
if device_path == None :
    if len(avail_devices) == 0 :
        raise getopt.GetoptError("cannot find any optical writer drives")
    #end if
    if len(avail_devices) > 1 :
        raise getopt.GetoptError("more than one optical writer drive found: %s" % ", ".join(get_prop(dev[1], udisks_device_interface, "DeviceFile") for dev in avail_devices))
    #end if
    device_name, device_obj = avail_devices[0]
    device_path = get_prop(device_obj, udisks_device_interface, "DeviceFile")
else :
    device_obj = dict \
      (
        (
            get_prop(d[1], udisks_device_interface, "DeviceFile"), d[1],
        )
        for d in avail_devices
      ).get(device_path)
    if device_obj == None :
        raise getopt.GetoptError \
          (
            "device \"%s\" doesn't seem to be an optical writer" % device_path
          )
    #end if
#end if
if do_close :
    # UDisks doesn't provide any call for closing the device tray,
    # so I do it the low-level way
    fd = os.open(device_path, os.O_RDWR | os.O_NONBLOCK)
      # O_NONBLOCK avoids immediate error if media hasn't been detected yet.
      # Actually just opening the device file without this is sufficient to
      # automatically close the tray, but what the heck.
    ioctl(fd, CDROMCLOSETRAY)
    os.close(fd)
#end if

if not quiet :
    sys.stderr.write("waiting for disc on %s... " % device_path)
    sys.stderr.flush()
#end if
while not get_prop(device_obj, udisks_device_interface, "DeviceIsMediaAvailable", to_bool) :
    time.sleep(poll_interval)
#end while
if not quiet :
    sys.stderr.write("got it.\n")
#end if
