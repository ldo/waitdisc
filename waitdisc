#!/usr/bin/python3
#+
# This script waits for media to appear in an optical drive
# before continuing. It is useful with CD/DVD-burning tools
# that seem incapable of doing this for themselves. Invoke it
# as follows:
#
#     waitdisc [--close] [devicename]
#
# where devicename is the path to the device file for the
# optical drive to poll; if omitted, this defaults to the
# only optical drive on the system, with an error reported
# if there is more than one.
#
# If --close is specified, then a command is sent to close
# the device tray before polling starts.
#
# The script repeatedly polls the UDisks2 daemon via D-Bus for the
# state of the specified drive, and exits when UDisks2 reports
# that there is media in the drive.
#
# Copyright 2013-2016 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY-SA <http://creativecommons.org/licenses/by-sa/4.0/>.
#-

import sys
import os
import time
from fcntl import \
    ioctl
import dbus
from xml.etree import \
    ElementTree as XMLElementTree
import getopt

# from /usr/include/linux/cdrom.h
CDROMCLOSETRAY = 0x5319

#+
# Useful D-Bus stuff
#-

def introspect(obj) :
    "constructs an XMLElementTree from the introspection of obj."
    return \
        XMLElementTree.fromstring \
          (
            dbus.Interface(obj, dbus_interface = "org.freedesktop.DBus.Introspectable")
                .Introspect()
          )
#end introspect

def get_prop(obj, interface, propname, conv = lambda x : x) :
    "returns the value of a specified property from a specified interface for the object."
    return \
        conv(dbus.Interface \
          (
            obj,
            dbus_interface = "org.freedesktop.DBus.Properties"
          ).Get(interface, propname))
#end get_prop

to_bool = lambda x : bool(int(x))
str_nullterm = lambda s : bytes(s)[:bytes(s).index(b"\0")].decode("utf-8")
  # strip trailing null and convert bytes to str

#+
# Useful UDisks2 stuff
#-

udisks_bus = "org.freedesktop.UDisks2"
udisks_block_device_interface = "org.freedesktop.UDisks2.Block"
udisks_block_devices_root = "/org/freedesktop/UDisks2/block_devices" # not so exciting
udisks_drive_interface = "org.freedesktop.UDisks2.Drive"
udisks_drives_root = "/org/freedesktop/UDisks2/drives"

def find_optical_writer_drives() :
    "generator which yields D-Bus object paths and object references representing" \
    " all optical drives found on the system."
    # Unfortunately, UDisks2 doesn’t seem to offer any way to check that an
    # optical drive actually supports writing, like UDisks did.
    # Don’t bother recovering from any dbus.exceptions.DBusException errors,
    # for example simply die if UDisks2 daemon is not running.
    device_names = {}
    udisks_devices = dbus.SystemBus().get_object(udisks_bus, udisks_block_devices_root)
    for device_node in introspect(udisks_devices).findall("node") :
        # need to construct a separate mapping from device IDs to block-device names
        device_name = udisks_block_devices_root + "/" + device_node.get("name")
        device = dbus.SystemBus().get_object(udisks_bus, device_name)
        props = {}
        for \
            name, cvt \
        in \
            (
                ("Drive", str),
                ("PreferredDevice", str_nullterm),
            ) \
        :
            props[name] = cvt(get_prop(device, udisks_block_device_interface, name))
        #end for
        device_names[props["Drive"]] = props["PreferredDevice"]
    #end for
    udisks_devices = dbus.SystemBus().get_object(udisks_bus, udisks_drives_root)
    for device_node in introspect(udisks_devices).findall("node") :
        device_name = udisks_drives_root + "/" + device_node.get("name")
        device = dbus.SystemBus().get_object(udisks_bus, device_name)
        if (
            any
              (
                str(s).startswith("optical")
                for s in get_prop(device, udisks_drive_interface, "MediaCompatibility")
              )
        ) :
            yield device_name, device, device_names[device_name]
        #end if
    #end for
#end find_optical_writer_drives

#+
# Mainline
#-

do_close = False
device_path = None
poll_interval = 0.25
quiet = False
(opts, args) = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ("close", "poll=", "quiet")
  )
if len(args) > 1 :
    raise getopt.GetoptError("need no more than one arg, the device path of the optical drive")
#end if
for keyword, value in opts :
    if keyword == "--close" :
        do_close = True
    elif keyword == "--poll" :
        poll_interval = float(value)
    elif keyword == "--quiet" :
        quiet = True
    #end if
#end for
if len(args) > 0 :
    device_path = os.path.realpath(args[0])
#end if

avail_devices = list(find_optical_writer_drives())
if device_path == None :
    if len(avail_devices) == 0 :
        raise getopt.GetoptError("cannot find any optical writer drives")
    #end if
    if len(avail_devices) > 1 :
        raise getopt.GetoptError("more than one optical writer drive found: %s" % ", ".join(dev[2] for dev in avail_devices))
    #end if
    device_name, device_obj, device_path = avail_devices[0]
else :
    device_obj = dict((dev[2], dev[1]) for dev in avail_devices).get(device_path)
    if device_obj == None :
        raise getopt.GetoptError \
          (
            "device \"%s\" doesn't seem to be an optical writer" % device_path
          )
    #end if
#end if
if do_close :
    # UDisks2 doesn't provide any call for closing the device tray,
    # so I do it the low-level way
    fd = os.open(device_path, os.O_RDWR | os.O_NONBLOCK)
      # O_NONBLOCK avoids immediate error if media hasn't been detected yet.
      # Actually just opening the device file without this is sufficient to
      # automatically close the tray, but what the heck.
    ioctl(fd, CDROMCLOSETRAY)
    os.close(fd)
#end if

if not quiet :
    sys.stderr.write("waiting for disc on %s... " % device_path)
    sys.stderr.flush()
#end if
while not get_prop(device_obj, udisks_drive_interface, "MediaAvailable", to_bool) :
    time.sleep(poll_interval)
#end while
if not quiet :
    sys.stderr.write("got it.\n")
#end if
